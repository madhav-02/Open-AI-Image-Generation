FRONTEND:

Used vite (wheat) - it is a build tool, that sets up our development environment. 
It is an alternative to "npx create-react-app" style of creating a project.
It uses HMR - Hot module replacement -> every change in the code will reflect the changes in the 
web app instantly without refrreshing.

Imported css code from external websites since main focus was on the components part and not styling.

Home page - return the images that were searched or created previously. If not no images is shown.

We have somehting called "prompts" in our app. It is a 50 predefined hardcoded STRINGS 
that will help user to develop a random image in case they don't have any ideas.
It will randomly select a string and create an image based on it.
The random strings are present in the src/constants.index.js file.

assets- has images for the image preivew, logo of our webiste on top left etc.
components - 
        In create page, each field ie) Name, Prompt both are a FormField component.
        Each has it own props like, type, name, palceholder etc.

        For prompt field, we send an variable issupriseme as a prop, so that while rendering we 
        can see the button to generate random prompt. Because the name field uses the same comp,
        but it should not display the button. That's why we use issupriseme while rendering form 
        component.

        we pass two functions as handler events.
        1) handleChange - whenever user types someting on the name or prompt field,
        we immediately set the state of the form using setForm useState in handleChange event.
         The ...form means keep all the properites of the state. And followed by the changes that has been currently made.
         [event.target.name]:event.target.value => will update the form which has key as event.target.name to event.target.value, which is
         the value entered by the user.

        2) handleSupriseMe - on clicking the suprise me button, this will get called and using random func generator, a random index is called
        from 0 to 50 (see index.js of constant folder) for the index of the random prompt string.

pages - 
    1) CreatePost:

        This will have the form field which will have FormField components for name, prompt.
        And image generation area. Approporiate event handlers are defined here that will be sent as props to FormField.

       const [generatingImage, setGeneratingImage] = useState(false); - State variable initially false. Used when image is being generated, a loding component will be 
        displayed to the user to notify them that the image is being generated.

        const [form, setForm] = useState({
    name: '',
    prompt: '',           // the sting that user wants to create an image of.
    photo: ''
  }) => Initial state of the form


    While clicking the Showcase it to the WOrld button, the images gets added to the DB and it will be with all\
    other posts created previosuly.
    It will automatically redirect to the HOME PAGE.

  2) Home: It will be the home for all the posts that were create dpreviously. It also includes a search by username or prompt field,
  that will filter posts based on username or prompt. The most recent one is the largest image that is shown.




cd to frontend and - npm run dev

Each and every form field like search post filter in home page, username and prompt filed in create page belongs to the same component - FormField.
We are resuing the same FormField  component in different places.






  BACKEND:
    
    link for the OpenAI documentation for creating an image- https://platform.openai.com/docs/api-reference/images/create
    While testing the create image in postman or ThunderCLient - paste the api key in the auth section

  IN the backend, we have two routes:
  1) dalleRoutes (dalle - name of the neural network that the model was trained upon).
      This route is used for handling the generation of API task. It has a post route.
      The only thing that is required from the user is - prompt - the string based on which img is generated.
      The structure of the request is mentioned in their documentation.

      In the frontend, in ceatepost.jsx file we request using the fetch command in the 
      generateImage handler.


  2) postRoutes:
    This route is responsible for adding the AI generated image and store in the cloudinary as well as our
    MONGODB database.
    there are two endpoints here.
    1) get (/) hat will fetch all the posts saved from mongoDB.
    2) post(/) that will take the image generated, upload it to the cloudinary platform
    through its function(cloudinary.uploader.upload).
    This will return the photoURL of the imaeg stored there.

    So in the mongoDB we store the {name,prompt,photoURL}.
    name- name of the user.
    prompt - prompt entered by the user for the image
    phototURL- url of the image.




  We have used cloudinary - it is a cloud platform to upload images and videos and store them.
  Also it can give us the link to the stored images that can be retrieved later.

  So we are basically generating images using the OpenAI's Dalle neural network.
  And that image is uploaded to the cloudinary cloud using their api.
  Now it stores the image and generates a link to access it. 
  Now we store this link of that image created along with username and prompt entered in the MongoDb databse.
  
      

      cd to backend/ and - npm start

      To login to Open AI - used 007 gmail acct. 669 was used previously but API limit got maxed.

      To check the database contents- sign in to mongodb atlas platform. Use 007 gmail acct. In ur cluster, under database section, see browse collections. The db name is OpenAI-Image

HOSTING:

To view the application - Visit - https://glowing-speculoos-d4a45a.netlify.app/
Backend hosted at Render (Website hosting plaform) - Login using github account. 
Frontend Hosted at Netlify - Login using Github account.